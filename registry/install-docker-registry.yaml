- hosts: control_plane
  become: yes
  vars:
      - username: "admin"
      - password: "admin"
      - user: "admin"
      - domain: "registry.domain.com"
  tasks:
    - name: Add Docker repo
    get_url:
      url: https://download.docker.com/linux/centos/docker-ce.repo
      dest: /etc/yum.repos.d/docer-ce.repo
    become: yes

    - name: Enable Docker Edge repo
      ini_file:
        dest: /etc/yum.repos.d/docer-ce.repo
        section: 'docker-ce-edge'
        option: enabled
        value: 0
      become: yes

    - name: Enable Docker Test repo
      ini_file:
        dest: /etc/yum.repos.d/docer-ce.repo
        section: 'docker-ce-test'
        option: enabled
        value: 0
      become: yes

    - name: Install Docker
      package:
        name: docker-ce
        state: latest
        nobest: true
      become: yes

    - name: Start Docker service
      service:
        name: docker
        state: started
        enabled: yes
      become: yes


    - name: Start Docker service
      service:
        name: docker
        state: started
        enabled: yes
      become: yes

    - name: Add user "{{user}}" to docker group
      user:
        name: "{{user}}"
        groups: docker
        append: yes
      become: yes

    - name: Install curl
      package:
        name: curl
        state: latest
      become: yes

    - name: Download docker compose
      shell: curl -L https://github.com/docker/compose/releases/download/1.25.4/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose

    - name: Create a symbolic link to /usr/bin
      shell: ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose

    - name: Apply executable permissions to docker compose binary
      shell: sudo chmod +x /usr/local/bin/docker-compose;

    - name: Install htpasswd in RHEL
      shell: yum provides \*bin/htpasswd -y

    # - name: create htpasswd
    #   shell: cd ~/docker-registry/auth | htpasswd -Bc registry.password {{username}}

    - name: Create Docker registry directory
      file: path=~/docker-registry state=directory

    - name: Create Docker registry auth directory
      file: path=~/docker-registry/auth state=directory

    - name: Create Docker registry data directory
      file: path=~/docker-registry/data state=directory

    - name: Generate docker compose file for registry
      copy:
      dest: "~/docker-registry/docker-compose.yaml"
      content: |
          version: '3'

          services:
            registry:
              restart: always
              image: registry:2
              ports:
              - "5000:5000"
              environment:
                REGISTRY_AUTH: htpasswd
                REGISTRY_AUTH_HTPASSWD_REALM: Registry
                REGISTRY_AUTH_HTPASSWD_PATH: /auth/registry.password
                REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY: /data
              volumes:
                - ./auth:/auth
                - ./data:/data

    - name: Install Nginx
      package:
        name: nginx
        state: latest
      become: yes

    - name: Edit nginx conf file
      copy:
      dest: /etc/nginx/nginx.conf
      content: |
          # For more information on configuration, see:
          #   * Official English Documentation: http://nginx.org/en/docs/
          #   * Official Russian Documentation: http://nginx.org/ru/docs/

          user nginx;
          worker_processes auto;
          error_log /var/log/nginx/error.log;
          pid /run/nginx.pid;

          # Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.
          include /usr/share/nginx/modules/*.conf;

          events {
              worker_connections 1024;
          }

          http {
              log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                                '$status $body_bytes_sent "$http_referer" '
                                '"$http_user_agent" "$http_x_forwarded_for"';

              access_log  /var/log/nginx/access.log  main;
              client_max_body_size 16384m;
              sendfile            on;
              tcp_nopush          on;
              tcp_nodelay         on;
              keepalive_timeout   65;
              types_hash_max_size 2048;

              include             /etc/nginx/mime.types;
              default_type        application/octet-stream;

              # Load modular configuration files from the /etc/nginx/conf.d directory.
              # See http://nginx.org/en/docs/ngx_core_module.html#include
              # for more information.
              include /etc/nginx/conf.d/*.conf;

              server {
                  listen       80 default_server;
                  listen       [::]:80 default_server;
                  server_name  _;
                  root         /usr/share/nginx/html;

                  # Load configuration files for the default server block.
                  include /etc/nginx/default.d/*.conf;

                  location / {
                  }

                  error_page 404 /404.html;
                      location = /40x.html {
                  }

                  error_page 500 502 503 504 /50x.html;
                      location = /50x.html {
                  }
              }
          server {
              server_name  {{domain}};
              location / {
                  proxy_pass        http://localhost:5000/;

                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;

                  proxy_redirect off;
                  proxy_buffering   off;

                  proxy_http_version 1.1;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection "upgrade";

                  #return 302 https://$server_name$request_uri;
              }

          }

          # Settings for a TLS enabled server.
          #
          #    server {
          #        listen       443 ssl http2 default_server;
          #        listen       [::]:443 ssl http2 default_server;
          #        server_name  _;
          #        root         /usr/share/nginx/html;
          #
          #        ssl_certificate "/etc/pki/nginx/server.crt";
          #        ssl_certificate_key "/etc/pki/nginx/private/server.key";
          #        ssl_session_cache shared:SSL:1m;
          #        ssl_session_timeout  10m;
          #        ssl_ciphers PROFILE=SYSTEM;
          #        ssl_prefer_server_ciphers on;
          #
          #        # Load configuration files for the default server block.
          #        include /etc/nginx/default.d/*.conf;
          #
          #        location / {
          #        }
          #
          #        error_page 404 /404.html;
          #            location = /40x.html {
          #        }
          #
          #        error_page 500 502 503 504 /50x.html;
          #            location = /50x.html {
          #        }
          #    }
          }

    - name: Install Epel-Release
      dnf:
        name: epel-release
        state: present

    - name: Install Certbot
      dnf:
        name: certbot
        state: present

    - name: Install nginx cerbot module for python
      dnf:
        name: python3-certbot-nginx

    - name: Install mod_ssl
      dnf:
        name: mod_ssl
        state: present

    - name: Print out Success message
      debug:
        msg:
          - "Almost set create new htpaswd, add cerbot certificate, restart nginx and run docker-compose up -d in the ~/docker-registry directory"